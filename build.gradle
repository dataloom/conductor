plugins {
    id "application"
    id "java"
    id "eclipse"
    id "idea"
    id "jacoco"
    id 'com.github.johnrengelman.shadow' version '1.2.3'
}
/*
*	Kryptnostic conductor service
* 	version is defined in kryptnostic-gradles/kryptnostic.gradle
*/

plugins {
    id 'com.palantir.docker' version '0.8.0'
}

description = "Kryptnostic Conductor Server"
group = "com.kryptnostic"
ext.projectName = "kryptnostic-conductor"



apply from: "http://api.krypt.int/gradle/docker.gradle"
apply from: "http://api.krypt.int/gradle/kryptnostic.gradle"

mainClassName = "com.kryptnostic.conductor.ElConductor"
applicationDefaultJvmArgs = ["-Xmx1G","-Xms1G","-server"]
sourceCompatibility=JavaVersion.VERSION_1_8
targetCompatibility=JavaVersion.VERSION_1_8

run {
  if (System.getProperty("exec.args")) {
    args System.getProperty("exec.args").split()
  }
}

configurations {
    provided
}

sourceSets {
    main.compileClasspath += configurations.provided
    test.compileClasspath += configurations.provided
    test.runtimeClasspath += configurations.provided
}

dependencies {  
    compile "com.fasterxml.jackson.dataformat:jackson-dataformat-csv:${jackson_version}"
    compile "com.datastax.spark:spark-cassandra-connector-java_2.10:${spark_cassandra_connector_version}"
    compile "org.apache.spark:spark-core_2.10:${spark_version}"
    compile "org.apache.spark:spark-sql_2.10:${spark_version}"
    compile "org.apache.spark:spark-mllib_2.10:${spark_version}"
    compile "org.apache.spark:spark-graphx_2.10:${spark_version}"
    compile "org.apache.spark:spark-streaming_2.10:${spark_version}"
    
    if( project.hasProperty('developmentMode') && project.developmentMode ) {
        logger.quiet(project.name + " using project dependencies.")
        compile project(":rhizome")
        compile project(":kryptnostic-mapstores")
        compile project(":kryptnostic-conductor-client")
        compile project(":kindling")
    } else {
        logger.quiet(project.name + " using jar dependencies.")
        compile "com.kryptnostic:rhizome:${rhizome_version}"
        compile "com.kryptnostic:kryptnostic-mapstores:${mapstores_version}"
        compile "com.kryptnostic:kryptnostic-conductor-client:${conductor_client_version}"
        compile "com.kryptnostic:kindling:${kindling_version}"
    }
    /*
     * TESTING
     */
     testCompile "junit:junit:${junit_version}"
     testCompile "org.mockito:mockito-all:${mockito_version}"

}

test {
    systemProperty 'java.library.path','lib/centos:lib/macosx:/usr/lib64'
    jvmArgs '-Djava.library.path=./lib/centos:./lib/macosx:/usr/lib64'
}

task sourcesJar(type : Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn:javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

eclipse {
    ext.downloadSources = true
    ext.downloadJavadoc = true

    ext.sourceCompatibility=JavaVersion.VERSION_1_8
    ext.targetCompatibility=JavaVersion.VERSION_1_8
}

eclipse.classpath.plusConfigurations += [configurations.provided] 
